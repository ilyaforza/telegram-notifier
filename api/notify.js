// /api/notify.js
import axios from 'axios';

export default async function handler(req, res) {
  // üëá –î–æ–±–∞–≤–ª—è–µ–º CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏
const allowedOrigins = ['http://localhost:5173','https://unionfloors.ru/protections']
const origin = req.headers.origin;
if (allowedOrigins.includes(origin)) {
  res.setHeader('Access-Control-Allow-Origin', origin);
}
  
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å CORS)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST.' });
  }

  const { message, userId } = req.body;

  const BOT_TOKEN = process.env.BOT_TOKEN;
  const DEFAULT_CHAT_ID = process.env.TELEGRAM_USER_ID;

  const targetChatId = userId || DEFAULT_CHAT_ID;

  if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN' });
  }

  if (!targetChatId) {
    return res.status(400).json({
      error: '–ù–µ —É–∫–∞–∑–∞–Ω userId. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ TELEGRAM_USER_ID –≤ Vercel Environment Variables.',
    });
  }

  if (!message || typeof message !== 'string') {
    return res.status(400).json({
      error: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "message" (—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).',
    });
  }

  try {
    const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: targetChatId,
      text: message,
      parse_mode: 'HTML',
    });

    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetChatId}`);
    return res.status(200).json({
      success: true,
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.',
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.response?.data || error.message);
    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.',
      details: error.response?.data || error.message,
    });
  }
}