// pages/api/check-expirations.js
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore, collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';
import axios from 'axios';

// üî• Firebase config ‚Äî —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –≤ app.jsx
const firebaseConfig = {
  apiKey: "AIzaSyDprHzxIZ79Fd2nA-9QLor2j4kXwXaoFNQ",
  authDomain: "union-protection-1876d.firebaseapp.com",
  projectId: "union-protection-1876d",
  storageBucket: "union-protection-1876d.firebasestorage.app",
  messagingSenderId: "929279771683",
  appId: "1:929279771683:web:508c8666ec94f799769d96"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore(app);

export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∏–ª–∏ POST (cron-—Å–µ—Ä–≤–∏—Å—ã –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç GET)
  if (req.method !== 'GET' && req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
  }

  try {
    const now = new Date();
    // –ó–∞–ø—Ä–æ—Å: –≤—Å–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ expiresAt <= now –∏ telegramSent != true
    const q = query(
      collection(db, 'protections'),
      where('expiresAt', '<=', now.toISOString()),
      where('telegramSent', '!=', true) // –∏–ª–∏ where('telegramSent', '==', false), –µ—Å–ª–∏ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    );

    const snapshot = await getDocs(q);
    const results = [];

    if (snapshot.empty) {
      return res.status(200).json({ message: '–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π', processed: 0 });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    const managersSnapshot = await getDocs(collection(db, 'regionalManagers'));
    const managersMap = {};
    managersSnapshot.forEach(doc => {
      const data = doc.data();
      managersMap[data.name] = data.telegramUserId;
    });

    for (const docSnap of snapshot.docs) {
      const entry = { id: docSnap.id, ...docSnap.data() };

      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –°–†–ê–ó–£ ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await updateDoc(doc(db, 'protections', entry.id), { telegramSent: true });

      const telegramId = managersMap[entry.regionalManager];
      if (!telegramId) {
        results.push({ id: entry.id, status: 'no_telegram_id' });
        continue;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ –∂–µ, —á—Ç–æ –∏ –≤ app.jsx)
      const message = `‚ö†Ô∏è‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚ö†Ô∏è‚ö†Ô∏è

üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: ${entry.organization || '‚Äî'}
üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${entry.manager || '‚Äî'}
üîñ –ê—Ä—Ç–∏–∫—É–ª: ${entry.article || '‚Äî'}
üìê –ú–µ—Ç—Ä–∞–∂: ${entry.area || '‚Äî'}
üßë‚Äçüíº –ö–ª–∏–µ–Ω—Ç: ${entry.clientName || '‚Äî'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${entry.clientPhone || '‚Äî'}

üë®‚Äçüíº –†–µ–≥. –º–µ–Ω–µ–¥–∂–µ—Ä: ${entry.regionalManager || '‚Äî'}
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date(entry.expiresAt).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`;

      try {
        await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
          chat_id: telegramId,
          text: message,
          parse_mode: 'HTML'
        });
        results.push({ id: entry.id, status: 'sent', to: telegramId });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ Telegram:', err.message);
        results.push({ id: entry.id, status: 'error', error: err.message });
      }
    }

    return res.status(200).json({
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      processed: results.length,
      details: results
    });

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
  }
}